(define (problem p)
(:domain depots)
(:objects
	DEPOT0 - PLACE
	DISTRIBUTOR0 - PLACE
	DISTRIBUTOR1 - PLACE
	TRUCK0 - LOCATABLE
	TRUCK1 - LOCATABLE
	PALLET0 - LOCATABLE
	PALLET1 - LOCATABLE
	PALLET2 - LOCATABLE
	CRATE0 - LOCATABLE
	CRATE1 - LOCATABLE
	CRATE2 - LOCATABLE
	CRATE3 - LOCATABLE
	HOIST0 - LOCATABLE
	HOIST1 - LOCATABLE
	HOIST2 - LOCATABLE
	DEPOT0 - OBJECT
	DISTRIBUTOR0 - OBJECT
	DISTRIBUTOR1 - OBJECT
	TRUCK0 - OBJECT
	TRUCK1 - OBJECT
	PALLET0 - OBJECT
	PALLET1 - OBJECT
	PALLET2 - OBJECT
	CRATE0 - OBJECT
	CRATE1 - OBJECT
	CRATE2 - OBJECT
	CRATE3 - OBJECT
	HOIST0 - OBJECT
	HOIST1 - OBJECT
	HOIST2 - OBJECT
	DEPOT0 - DEPOT
	DISTRIBUTOR0 - DISTRIBUTOR
	DISTRIBUTOR1 - DISTRIBUTOR
	TRUCK0 - TRUCK
	TRUCK1 - TRUCK
	HOIST0 - HOIST
	HOIST1 - HOIST
	HOIST2 - HOIST
	PALLET0 - SURFACE
	PALLET1 - SURFACE
	PALLET2 - SURFACE
	CRATE0 - SURFACE
	CRATE1 - SURFACE
	CRATE2 - SURFACE
	CRATE3 - SURFACE
	PALLET0 - PALLET
	PALLET1 - PALLET
	PALLET2 - PALLET
	CRATE0 - CRATE
	CRATE1 - CRATE
	CRATE2 - CRATE
	CRATE3 - CRATE
)
(:htn
	:tasks (and
	(task0 (ACHIEVE-ON CRATE0 PALLET2))
	(task1 (ACHIEVE-ON CRATE1 CRATE3))
	(task2 (ACHIEVE-ON CRATE2 PALLET0))
	(task3 (ACHIEVE-ON CRATE3 PALLET1))
	)
:ordering (and
	(task3 < task2)
	(task2 < task1)
	(task1 < task0)
)
:constraints ( )
)
(:init
        (AT PALLET0 DEPOT0)
        (CLEAR CRATE0)
        (AT PALLET1 DISTRIBUTOR0)
        (CLEAR CRATE3)
        (AT PALLET2 DISTRIBUTOR1)
        (CLEAR CRATE2)
        (AT TRUCK0 DEPOT0)
        (AT TRUCK1 DEPOT0)
        (AT HOIST0 DEPOT0)
        (AVAILABLE HOIST0)
        (AT HOIST1 DISTRIBUTOR0)
        (AVAILABLE HOIST1)
        (AT HOIST2 DISTRIBUTOR1)
        (AVAILABLE HOIST2)
        (AT CRATE0 DEPOT0)
        (ON CRATE0 PALLET0)
        (AT CRATE1 DISTRIBUTOR1)
        (ON CRATE1 PALLET2)
        (AT CRATE2 DISTRIBUTOR1)
        (ON CRATE2 CRATE1)
        (AT CRATE3 DISTRIBUTOR0)
        (ON CRATE3 PALLET1)
)
)

