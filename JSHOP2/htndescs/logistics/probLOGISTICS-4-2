(define (problem p)
(:domain logistics)
(:objects
	TRU2 - TRUCK
	TRU1 - TRUCK
	APN1 - AIRPLANE
	APN1 - VEHICLE
	TRU2 - VEHICLE
	TRU1 - VEHICLE
	OBJ23 - PACKAGE
	OBJ22 - PACKAGE
	OBJ21 - PACKAGE
	OBJ13 - PACKAGE
	OBJ12 - PACKAGE
	OBJ11 - PACKAGE
	APN1 - PHYSOBJ
	TRU2 - PHYSOBJ
	TRU1 - PHYSOBJ
	OBJ23 - PHYSOBJ
	OBJ22 - PHYSOBJ
	OBJ21 - PHYSOBJ
	OBJ13 - PHYSOBJ
	OBJ12 - PHYSOBJ
	OBJ11 - PHYSOBJ
	APT2 - AIRPORT
	APT1 - AIRPORT
	POS2 - LOCATION
	POS1 - LOCATION
	APT2 - PLACE
	APT1 - PLACE
	POS2 - PLACE
	POS1 - PLACE
	CIT2 - CITY
	CIT1 - CITY
	APN1 - OBJECT
	APT2 - OBJECT
	APT1 - OBJECT
	POS2 - OBJECT
	POS1 - OBJECT
	CIT2 - OBJECT
	CIT1 - OBJECT
	TRU2 - OBJECT
	TRU1 - OBJECT
	OBJ23 - OBJECT
	OBJ22 - OBJECT
	OBJ21 - OBJECT
	OBJ13 - OBJECT
	OBJ12 - OBJECT
	OBJ11 - OBJECT
)
(:htn
	:tasks (and
	(task0 (ACHIEVE-AT OBJ21 APT1))
	(task1 (ACHIEVE-AT OBJ11 POS2))
	(task2 (ACHIEVE-AT OBJ23 POS2))
	(task3 (ACHIEVE-AT OBJ12 POS1))
	)
:ordering (and
	(task3 < task2)
	(task2 < task1)
	(task1 < task0)
)
:constraints ( )
)
(:init
        (AT APN1 APT1)
        (AT TRU1 POS1)
        (AT OBJ11 POS1)
        (AT OBJ12 POS1)
        (AT OBJ13 POS1)
        (AT TRU2 POS2)
        (AT OBJ21 POS2)
        (AT OBJ22 POS2)
        (AT OBJ23 POS2)
        (IN-CITY POS1 CIT1)
        (IN-CITY APT1 CIT1)
        (IN-CITY POS2 CIT2)
        (IN-CITY APT2 CIT2)
)
)

